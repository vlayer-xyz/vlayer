name: E2E example web apps test

on:
  pull_request:
  merge_group:
  push:
    branches:
      - main
concurrency:
  # Do not cancel jobs on main by forcing a unique group name.
  group: ${{ github.workflow }}-${{ github.ref_name == 'main' && github.run_id || github.ref_name }}
  cancel-in-progress: true

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      relevant-changes: ${{ steps.filter.outputs.relevant-changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Filter changed files
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            relevant-changes:
              - 'rust-toolchain.toml'
              - 'rust/**'
              - 'examples/**'
              - 'packages/**'
              - 'bash/run-services.sh'
              - 'bash/e2e-web-apps-test.sh'
              - '.github/workflows/test_e2e_web_apps.yaml'
              - 'contracts/**'

  test-e2e-web-apps:
    name: E2E web apps test
    needs: changes
    runs-on: aws-linux-medium
    if: github.event_name == 'push' || needs.changes.outputs.relevant-changes == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0 # Needed for restoring mtime
      # For more efficient Cargo target dir reuse
      - name: Restore timestamps
        uses: chetan/git-restore-mtime-action@26fb42a93ac0f66e9c0c5ad3bd03079cb9ee5300 # v2.1

      - name: Install Rust prerequisites
        id: rust_pre
        uses: ./.github/actions/rust-prerequisites
      - name: Install contracts prerequisites
        uses: ./.github/actions/contracts-prerequisites
      - name: Install TypeScript prerequisites
        uses: ./.github/actions/ts-prerequisites

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build sdk
        working-directory: ./packages/sdk
        run: bun run build

      - name: Build sdk-hooks
        working-directory: ./packages/sdk-hooks
        run: bun run build

      - name: Install Playwright Browsers
        run: bunx playwright install --with-deps chromium

      - name: Check clang and LLVM version
        env:
          EXPECTED_LLVM_VERSION: "18.1"
        run: bash/check-llvm-clang.sh

      - name: Install contracts' dependencies
        working-directory: ./contracts/vlayer
        run: forge soldeer install

      - name: Create reusable Cargo target dir
        id: cargo_target
        uses: ./.github/actions/reuse-cargo-target
        with:
          targets_path: ${{ vars.VLAYER_CARGO_TARGET_DIRS }}
          target_name: test-e2e-web-apps-mtime
      - name: Build binaries
        env:
          CARGO_TARGET_DIR: ${{ steps.cargo_target.outputs.CARGO_TARGET_DIR }}
          RISC0_USE_DOCKER: 1
          RUSTC_WRAPPER: ${{ steps.rust_pre.outputs.RUSTC_WRAPPER }}
        run: |
          cargo build --bin call_server --bin chain_server --bin worker --bin dns_server --features jwt
          mkdir -p ./target/debug
          mv ${CARGO_TARGET_DIR}/debug/{call_server,chain_server,worker,dns_server} ./target/debug/

      - name: Run e2e tests
        env:
          RUSTC_WRAPPER: ${{ steps.rust_pre.outputs.RUSTC_WRAPPER }}
          PROVING_MODE: "dev"
          VLAYER_ENV: dev
          VLAYER_TMP_DIR: ./artifacts
          BUILD_SERVICES: 0
          BUILD_CLI: 0
          PLAYWRIGHT_TEST_X_COM_AUTH_TOKEN: ${{ secrets.PLAYWRIGHT_TEST_X_COM_AUTH_TOKEN }}
        run: xvfb-run bash/e2e-web-apps-tests.sh

      # Teardown
      - name: Display Logs
        if: always()
        run: |
          for log_file in $(find ./artifacts/logs -type f); do
            echo "=== Contents of $log_file ==="
            cat "$log_file"
            echo "============================="
          done
      - name: Handle Playwright Reports
        uses: ./.github/actions/handle-playwright-reports
        if: ${{ !cancelled() }}
        with:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PLAYWRIGHT_REPORT_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          EXAMPLES_PATH: /examples/
          GITHUB_TOKEN: ${{ github.token }}
          ARTIFACT_RETENTION_DAYS: "30"
          REPORT_PATH: "examples/**/vlayer/playwright-report/"
          PR_NUMBER: ${{ github.event.number }}
          DEPLOY_TYPE: "examples"
          CONTEXT: "test-e2e-web-apps-devnet"
