name: Release vlayer artifacts
on:
  schedule:
    - cron: "0 6 * * 1-5" # Mon-Fri at 06:00 UTC (07:00 CET / 08:00 CEST)
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false
jobs:
  build-release:
    uses: ./.github/workflows/build_rust_release.yaml

  build-examples:
    name: Build examples
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Package examples
        run: ./bash/pack-examples.sh

      - name: Push artifact
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: examples
          path: out/examples.tar.gz
          if-no-files-found: error
          retention-days: 3

  build-extension:
    name: Build browser extension
    needs: [build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build extension
        uses: ./.github/actions/build-extension
        with:
          version_name: ${{ needs.build-release.outputs.vlayer_build }}

  push-contracts:
    name: Push vlayer contracts
    needs: [build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install contracts prerequisites
        uses: ./.github/actions/contracts-prerequisites

      - name: Set up Soldeer login
        env:
          SOLDEER_LOGIN_FILE: "${{ runner.temp }}/.soldeer_login"
        run: |
          forge soldeer login --email "${{ secrets.SOLDEER_ADMIN_LOGIN }}" --password "${{ secrets.SOLDEER_ADMIN_PASSWORD }}"

      - name: Download guest artifacts
        uses: actions/download-artifact@v4
        with:
          name: guest-artifacts
          path: ./guest-artifacts

      - name: Copy ImageID to contracts
        run: |
          rm contracts/vlayer/src/ImageID.sol
          cp guest-artifacts/ImageID.sol contracts/vlayer/src/ImageID.sol

      - name: Release contracts to Soldeer
        working-directory: contracts/vlayer
        env:
          SOLDEER_LOGIN_FILE: "${{ runner.temp }}/.soldeer_login"
          VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
        run: |
          forge soldeer push "vlayer~${VLAYER_BUILD}" --skip-warnings

      - name: Build vlayer contracts artifact
        working-directory: contracts/vlayer
        env:
          VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
        run: |
          forge soldeer push "vlayer~${VLAYER_BUILD}" --dry-run

      - name: Try publish newest ImageId onchain
        uses: ./.github/actions/publish-image-id-onchain
        with:
          dry_run: true
          private_key: ${{ secrets.REPOSITORY_CONTRACT_OWNER_PRIVATE_KEY }}

      - name: Publish newest ImageId onchain
        uses: ./.github/actions/publish-image-id-onchain
        with:
          dry_run: false
          private_key: ${{ secrets.REPOSITORY_CONTRACT_OWNER_PRIVATE_KEY }}

      - name: Push contracts artifact
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: vlayer-contracts
          path: contracts/vlayer/vlayer.zip
          if-no-files-found: error
          retention-days: 3

  create-release:
    name: Create GH releases
    runs-on: ubuntu-latest
    needs: [build-examples, build-extension, push-contracts]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - run: mkdir -p dist
      - uses: actions/download-artifact@v4
        with:
          path: ./dist
          merge-multiple: true
      - run: rm ./dist/{ImageID.sol,Elf.sol,methods.rs,risc0_call_guest} || true
      - run: cp ./docker/docker-compose.devnet.yaml ./dist/

      - name: Release tagged nightly
        uses: ncipollo/release-action@v1
        with:
          tag: nightly-${{ github.sha }}
          allowUpdates: true
          artifacts: "./dist/*"

      - name: Release nightly-latest
        uses: ncipollo/release-action@v1
        with:
          tag: nightly-latest
          makeLatest: true
          allowUpdates: true
          artifacts: "./dist/*"

  push-artifacts-to-s3:
    name: Push artifacts to AWS S3
    runs-on: ubuntu-latest
    needs: [build-release, build-examples, build-extension, push-contracts]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - run: mkdir -p dist/latest
      - uses: actions/download-artifact@v4
        with:
          path: ./dist/latest
          merge-multiple: true
      - run: rm ./dist/latest/{ImageID.sol,Elf.sol,methods.rs,risc0_call_guest} || true
      - run: cp ./docker/docker-compose.devnet.yaml ./dist/latest/
      - env:
          VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
        run: cp -r "./dist/latest" "./dist/${VLAYER_BUILD}"

      - name: Push tagged binaries to AWS S3
        uses: mostlytyped/s3-put-action@v1.0.0
        with:
          args: --recursive
        env:
          AWS_ENDPOINT: ${{ vars.AWS_ENDPOINT }}
          AWS_BUCKET: ${{ vars.AWS_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          LOCAL_FILE: ./dist/${{ needs.build-release.outputs.vlayer_build }}
          REMOTE_FILE: ""

      - name: Push latest binaries to AWS S3
        uses: mostlytyped/s3-put-action@v1.0.0
        with:
          args: --recursive
        env:
          AWS_ENDPOINT: ${{ vars.AWS_ENDPOINT }}
          AWS_BUCKET: ${{ vars.AWS_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          LOCAL_FILE: ./dist/latest
          REMOTE_FILE: ""

      - name: Push vlayerup scripts to AWS S3
        uses: mostlytyped/s3-put-action@v1.0.0
        with:
          args: --recursive
        env:
          AWS_ENDPOINT: ${{ vars.AWS_ENDPOINT }}
          AWS_BUCKET: ${{ vars.AWS_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          LOCAL_FILE: ./bash/vlayerup
          REMOTE_FILE: ""

  publish-sdk-to-npm:
    name: Publish SDK to NPM
    needs: [build-release, build-examples, build-extension, push-contracts]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install TypeScript prerequisites
        uses: ./.github/actions/ts-prerequisites
      - name: Update SDK version
        working-directory: packages/sdk
        env:
          VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
        run: npm version "${VLAYER_BUILD}" --no-workspaces-update
      - name: Install dependencies
        working-directory: packages/sdk
        run: bun install
      - name: replace symlinks
        working-directory: packages/sdk
        run: bun run replaceCommonsSymlink
      - name: Build
        working-directory: packages/sdk
        run: bun run build
      - name: Publish to NPM
        working-directory: packages/sdk
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          PACKAGE_NAME=$(npm pack)
          npm publish --access public ${PACKAGE_NAME}

  publish-react-hooks-to-npm:
    name: Publish React hooks to NPM
    needs: [build-release, publish-sdk-to-npm]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install TypeScript prerequisites
        uses: ./.github/actions/ts-prerequisites
      - name: Update React hooks version
        working-directory: packages/sdk-hooks
        env:
          VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
        run: npm version "${VLAYER_BUILD}" --no-workspaces-update
      - name: Install dependencies
        working-directory: packages/sdk-hooks
        run: bun install --frozen-lockfile
      - name: Install released SDK version
        env:
          VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
        run: bun add @vlayer/sdk@"${VLAYER_BUILD}"
      - name: Build
        working-directory: packages/sdk-hooks
        run: bun run build
      - name: Publish to NPM
        working-directory: packages/sdk-hooks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          PACKAGE_NAME=$(npm pack)
          npm publish --access public ${PACKAGE_NAME}

  push-docker-image:
    name: Push docker image to github registry
    needs: [build-release, push-artifacts-to-s3]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        docker_image:
          [
            "vlayer",
            "call_server",
            "chain_server",
            "chain_worker",
            "vdns_server",
          ]
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: "vlayer-xyz/${{ matrix.docker_image }}"
      VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: "docker/${{ matrix.docker_image }}/Dockerfile.nightly"
          push: true
          tags: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VLAYER_BUILD }}"
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
