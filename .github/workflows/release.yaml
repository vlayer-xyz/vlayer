name: Release vlayer artifacts
on:
  schedule:
    - cron: "0 6 * * 1-5" # Mon-Fri at 06:00 UTC (07:00 CET / 08:00 CEST)
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false
jobs:
  build-guest-wrapper:
    defaults:
      run:
        working-directory: rust
    name: Build guest wrapper and save guest replacements for later use
    runs-on: aws-linux-medium

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-workspaces: |
            rust
            rust/services/call/guest_wrapper/risc0_guest
            rust/services/chain/guest_wrapper/risc0_guest

      - name: Install cargo-binstall
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Install risc0 installer
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cargo binstall -y cargo-risczero@1.1.3 --force

      - name: Install risc0 toolchain
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cargo risczero install

      - name: Install contracts prerequisites
        uses: ./.github/actions/contracts-prerequisites

      - name: "Build guest wrapper"
        run: cargo build --release --target x86_64-unknown-linux-gnu --package call_guest_wrapper

      - name: "Save methods.rs and ELF binary"
        run: |
          METHODS="$(find target -type f -name "methods.rs" -path '*/call_guest_wrapper-*/*')"
          if [ $(echo -e "$METHODS" | wc -l) = "1" ]; then
            cp "$METHODS" ./target/assets/
          else
            echo "More than 1 methods.rs found! The search needs to be narrowed down. Found:"
            echo -e "$METHODS"
            exit 1
          fi

          BINARY_PATH="$(grep GUEST_ELF ./target/assets/methods.rs | grep include_bytes | sed -n 's/.*include_bytes!("\(.*\)").*/\1/p')"
          sed -i "s|${BINARY_PATH}|<ELF_PATH>|g" ./target/assets/methods.rs
          cp "$BINARY_PATH" ./target/assets/

      - name: Push guest artifacts
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: guest-artifacts
          path: rust/target/assets
          if-no-files-found: error
          retention-days: 3

  build-release:
    defaults:
      run:
        working-directory: rust
    name: Release nightly for ${{ matrix.target }}
    needs: [build-guest-wrapper]
    runs-on: ${{ matrix.runner }}
    outputs:
      vlayer_build: ${{ steps.vlayer_build.outputs.vlayer_build }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            suffix: linux-amd64
            runner: aws-linux-medium
          - target: x86_64-unknown-linux-musl
            suffix: linux-amd64-musl
            runner: aws-linux-medium
          - target: aarch64-apple-darwin
            suffix: darwin-arm64
            runner: macos-14

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Darwin prerequisites
        uses: ./.github/actions/darwin-prerequisites
        if: matrix.target == 'aarch64-apple-darwin'

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: x86_64-unknown-linux-musl
          cache-workspaces: |
            rust
            rust/services/call/guest_wrapper/risc0_guest
            rust/services/chain/guest_wrapper/risc0_guest

      - name: Install cargo-binstall
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Install risc0 installer
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cargo binstall -y cargo-risczero@1.1.3 --force

      - name: Install risc0 toolchain
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cargo risczero install

      - name: Install contracts prerequisites
        uses: ./.github/actions/contracts-prerequisites

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v2.0.4
        if: matrix.target != 'x86_64-unknown-linux-musl'
        with:
          version: "17.0.6"

      - name: Check nixpkgs inputs
        uses: DeterminateSystems/flake-checker-action@v9
        if: matrix.target == 'x86_64-unknown-linux-musl'
        with:
          flake-lock-path: ./.github/nix/flake.lock
          fail-mode: true

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v15
        if: matrix.target == 'x86_64-unknown-linux-musl'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v8
        if: matrix.target == 'x86_64-unknown-linux-musl'

      - uses: actions/download-artifact@v4
        with:
          name: guest-artifacts
          path: rust/call_guest_replacement

      - name: "Update elf path in methods.rs"
        run: |
          NEW_PATH=$(realpath ./call_guest_replacement/risc0_call_guest)
          echo "Replacing the elf binary path to: ${NEW_PATH}"
          sed -i.bak "s|<ELF_PATH>|${NEW_PATH}|" ./call_guest_replacement/methods.rs

      - name: "Build binaries"
        env:
          VLAYER_RELEASE: "nightly"
        if: matrix.target != 'x86_64-unknown-linux-musl'
        run: |
          export RISC0_EXISTING_CALL_GUEST="$(pwd)/call_guest_replacement"
          cargo build --release --target ${{ matrix.target }} --package cli

      - name: "Build binaries"
        env:
          VLAYER_RELEASE: "nightly"
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          export RISC0_EXISTING_CALL_GUEST="$(pwd)/call_guest_replacement"
          nix develop ../.github/nix/. --command bash -c "cargo build --release -p cli"

      - name: "Print build version"
        id: vlayer_build
        if: matrix.runner == 'aws-linux-medium' && matrix.target == 'x86_64-unknown-linux-gnu' # Run on any single aws-linux-medium instance
        env:
          VLAYER_RELEASE: "nightly"
        run: |
          BUILD=$(./target/${{ matrix.target }}/release/vlayer --version | awk '/vlayer/ {print $2}')
          echo "vlayer_build=${BUILD}" | tee -a ${GITHUB_OUTPUT}

      - name: Package release
        id: package-release
        env:
          OUTPUT_FILE_SUFFIX: "${{ matrix.suffix }}.tar.gz"
        run: |
          bins=(vlayer)
          mkdir -p target/${{ matrix.target }}/bin
          cd target/${{ matrix.target }}

          for name in "${bins[@]}" ; do
            mv "release/${name}" bin/
          done

          tar -czvf "nightly-${OUTPUT_FILE_SUFFIX}" bin
          echo "output_file=rust/target/${{ matrix.target }}/nightly-${OUTPUT_FILE_SUFFIX}" >> $GITHUB_OUTPUT
          echo "output_file_suffix=${OUTPUT_FILE_SUFFIX}" >> $GITHUB_OUTPUT

      - name: Push artifact
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: ${{ matrix.target }}
          path: ${{ steps.package-release.outputs.output_file }}
          if-no-files-found: error
          retention-days: 3

  build-examples:
    name: Build examples
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Package examples
        run: ./bash/pack-examples.sh

      - name: Push artifact
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: examples
          path: out/examples.tar.gz
          if-no-files-found: error
          retention-days: 3

  build-extension:
    name: Build browser extension
    needs: [build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install TypeScript prerequisites
        uses: ./.github/actions/ts-prerequisites
      - name: Install dependencies
        working-directory: packages/browser-extension
        run: bun install --frozen-lockfile
      - name: Update extension version
        working-directory: packages/browser-extension
        env:
          VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
        run: npm version "${VLAYER_BUILD}" --no-workspaces-update
      - name: Build and compress
        working-directory: packages/browser-extension
        run: |
          bun run build
          mv dist browser-extension
          tar -czvf browser-extension.tar.gz browser-extension

      - name: Push artifact
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: browser-extension
          path: packages/browser-extension/browser-extension.tar.gz
          if-no-files-found: error
          retention-days: 3

  push-contracts:
    name: Push vlayer contracts
    needs: [build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install contracts prerequisites
        uses: ./.github/actions/contracts-prerequisites

      - name: Set up Soldeer login
        env:
          SOLDEER_LOGIN_FILE: "${{ runner.temp }}/.soldeer_login"
        run: |
          forge soldeer login --email "${{ secrets.SOLDEER_ADMIN_LOGIN }}" --password "${{ secrets.SOLDEER_ADMIN_PASSWORD }}"

      - name: Download guest artifacts
        uses: actions/download-artifact@v4
        with:
          name: guest-artifacts
          path: ./guest-artifacts

      - name: Copy ImageID to contracts
        run: |
          rm contracts/vlayer/src/ImageID.sol
          cp guest-artifacts/ImageID.sol contracts/vlayer/src/ImageID.sol

      - name: Release contracts to Soldeer
        working-directory: contracts/vlayer
        env:
          SOLDEER_LOGIN_FILE: "${{ runner.temp }}/.soldeer_login"
          VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
        run: |
          forge soldeer push "vlayer~${VLAYER_BUILD}" --skip-warnings

      - name: Build vlayer contracts artifact
        working-directory: contracts/vlayer
        env:
          VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
        run: |
          forge soldeer push "vlayer~${VLAYER_BUILD}" --dry-run

      - name: Push contracts artifact
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: vlayer-contracts
          path: contracts/vlayer/vlayer.zip
          if-no-files-found: error
          retention-days: 3

  create-release:
    name: Create GH releases
    runs-on: aws-linux-small
    needs: [build-examples, build-extension, push-contracts]
    steps:
      - run: mkdir -p dist
      - uses: actions/download-artifact@v4
        with:
          path: ./dist
          merge-multiple: true
      - run: rm ./dist/{ImageID.sol,Elf.sol,methods.rs,risc0_call_guest} || true

      - name: Release tagged nightly
        uses: ncipollo/release-action@v1
        with:
          tag: nightly-${{ github.sha }}
          artifacts: "./dist/*"

      - name: Release nightly-latest
        uses: ncipollo/release-action@v1
        with:
          tag: nightly-latest
          makeLatest: true
          allowUpdates: true
          artifacts: "./dist/*"

  push-artifacts-to-s3:
    name: Push artifacts to AWS S3
    runs-on: ubuntu-latest
    needs: [build-release, build-examples, build-extension, push-contracts]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - run: mkdir -p dist/latest
      - uses: actions/download-artifact@v4
        with:
          path: ./dist/latest
          merge-multiple: true
      - run: rm ./dist/latest/{ImageID.sol,Elf.sol,methods.rs,risc0_call_guest} || true
      - env:
          VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
        run: cp -r "./dist/latest" "./dist/${VLAYER_BUILD}"

      - name: Push tagged binaries to AWS S3
        uses: mostlytyped/s3-put-action@v1.0.0
        with:
          args: --recursive
        env:
          AWS_ENDPOINT: ${{ vars.AWS_ENDPOINT }}
          AWS_BUCKET: ${{ vars.AWS_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          LOCAL_FILE: ./dist/${{ needs.build-release.outputs.vlayer_build }}
          REMOTE_FILE: ""

      - name: Push latest binaries to AWS S3
        uses: mostlytyped/s3-put-action@v1.0.0
        with:
          args: --recursive
        env:
          AWS_ENDPOINT: ${{ vars.AWS_ENDPOINT }}
          AWS_BUCKET: ${{ vars.AWS_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          LOCAL_FILE: ./dist/latest
          REMOTE_FILE: ""

      - name: Push vlayerup scripts to AWS S3
        uses: mostlytyped/s3-put-action@v1.0.0
        with:
          args: --recursive
        env:
          AWS_ENDPOINT: ${{ vars.AWS_ENDPOINT }}
          AWS_BUCKET: ${{ vars.AWS_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          LOCAL_FILE: ./bash/vlayerup
          REMOTE_FILE: ""

  publish-sdk-to-npm:
    name: Publish SDK to NPM
    needs: [build-release, build-examples, build-extension, push-contracts]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install TypeScript prerequisites
        uses: ./.github/actions/ts-prerequisites
      - uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org"
      - name: Update SDK version
        working-directory: packages/sdk
        env:
          VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
        run: npm version "${VLAYER_BUILD}" --no-workspaces-update
      - name: Install dependencies
        working-directory: packages/sdk
        run: bun install --frozen-lockfile
      - name: replace symlinks
        working-directory: packages/sdk
        run: bun run replaceCommonsSymlink
      - name: Build
        working-directory: packages/sdk
        run: bun run build
      - name: Publish to NPM
        working-directory: packages/sdk
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          PACKAGE_NAME=$(npm pack)
          npm publish --access public ${PACKAGE_NAME}

  push-docker-image:
    name: Push docker image to github registry
    needs: [build-release, push-artifacts-to-s3]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: docker/vlayer/Dockerfile.nightly
          push: true
          tags: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VLAYER_BUILD }}"
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
