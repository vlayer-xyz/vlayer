name: Release vlayer artifacts
on: 
  schedule:
    - cron: '0 22 * * 1-5' # Mon-Fri at 22:00 UTC
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false
jobs:
  build-guest-wrapper:
    defaults:
      run:
        working-directory: rust
    name: Build guest wrapper and save guest replacements for later use
    runs-on: aws-linux-medium

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-workspaces: |
            rust
            rust/services/call/guest_wrapper/risc0_guest
            rust/services/chain/guest_wrapper/risc0_guest

      - name: Install cargo-binstall
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Install risc0 installer
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cargo binstall -y cargo-risczero@1.0.5 --force

      - name: Install risc0 toolchain
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cargo risczero install

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly-bcacf39e43812e50a124e3ba60d1becd9866534d # 2024-10-11

      - name: "Build guest wrapper"
        run: cargo build --release --target x86_64-unknown-linux-gnu --package call_guest_wrapper

      - name: "Save methods.rs"
        run: |
          find target -type f -name "methods.rs" -exec cp -n {} ./target/assets/ \;

      - name: Push guest artifacts
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: guest-artifacts
          path: rust/target/assets
          if-no-files-found: error
          retention-days: 3

  build-release:
    defaults:
      run:
        working-directory: rust
    name: Release nightly for ${{ matrix.platform }} ${{ matrix.arch }}
    needs: [build-guest-wrapper]
    runs-on: ${{ matrix.runner }}
    outputs:
      vlayer_build: ${{ steps.vlayer_build.outputs.vlayer_build }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            platform: linux
            arch: amd64
            runner: aws-linux-medium
          - target: aarch64-apple-darwin
            platform: darwin
            arch: arm64
            runner: macos-14

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Darwin prerequisites
        uses: ./.github/actions/darwin-prerequisites
        if: matrix.platform == 'darwin' 

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-workspaces: |
            rust
            rust/services/call/guest_wrapper/risc0_guest
            rust/services/chain/guest_wrapper/risc0_guest

      - name: Install cargo-binstall
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Install risc0 installer
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cargo binstall -y cargo-risczero@1.0.5 --force

      - name: Install risc0 toolchain
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cargo risczero install

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly-bcacf39e43812e50a124e3ba60d1becd9866534d # 2024-10-11
          
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v2.0.4
        with:
          version: "17.0.6"

      - uses: actions/download-artifact@v4
        with:
          name: guest-artifacts
          path: rust/call_guest_replacement

      - name: "Build binaries"
        env:
          VLAYER_RELEASE: "nightly"
        run: |
          export RISC0_EXISTING_CALL_GUEST="$(pwd)/call_guest_replacement"
          cargo build --release --target ${{ matrix.target }} --package cli 

      - name: "Print build version"
        id: vlayer_build
        if: matrix.runner == 'aws-linux-medium' 
        env:
          VLAYER_RELEASE: "nightly"
        run: |
          BUILD=$(./target/${{ matrix.target }}/release/vlayer --version | awk '/vlayer/ {print $2}')
          echo "vlayer_build=${BUILD}" | tee -a ${GITHUB_OUTPUT}


      - name: Package release
        id: package-release
        env:
          OUTPUT_FILE_SUFFIX: "${{ matrix.platform }}-${{ matrix.arch }}.tar.gz"
        run: |
          bins=(vlayer)
          mkdir -p target/${{ matrix.target }}/bin
          cd target/${{ matrix.target }}

          for name in "${bins[@]}" ; do
            mv "release/${name}" bin/
          done

          tar -czvf "nightly-${OUTPUT_FILE_SUFFIX}" bin
          echo "output_file=rust/target/${{ matrix.target }}/nightly-${OUTPUT_FILE_SUFFIX}" >> $GITHUB_OUTPUT
          echo "output_file_suffix=${OUTPUT_FILE_SUFFIX}" >> $GITHUB_OUTPUT

      - name: Push artifact
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: ${{ matrix.target }}
          path: ${{ steps.package-release.outputs.output_file }}
          if-no-files-found: error
          retention-days: 3

  build-examples:
    name: Build examples
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Package examples
        run: ./bash/pack-examples.sh

      - name: Push artifact
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: examples
          path: out/examples.tar.gz
          if-no-files-found: error
          retention-days: 3

  build-extension:
    name: Build browser extension
    needs: [build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        working-directory: packages/browser-extension
        run: npm install
      - name: Update extension version
        working-directory: packages/browser-extension
        env: 
          VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
        run: npm version "${VLAYER_BUILD}"
      - name: Build and compress
        working-directory: packages/browser-extension
        run: |
          npm run build
          mv dist browser-extension
          tar -czvf browser-extension.tar.gz browser-extension

      - name: Push artifact
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: browser-extension
          path: packages/browser-extension/browser-extension.tar.gz
          if-no-files-found: error
          retention-days: 3
  
  push-contracts:
    name: Push vlayer contracts
    needs: [build-release] 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly-bcacf39e43812e50a124e3ba60d1becd9866534d # 2024-10-11

      - name: Set up Soldeer login
        env:
            SOLDEER_LOGIN_FILE: "${{ runner.temp }}/.soldeer_login"
        run: |
          echo -n "${{ secrets.SOLDEER_API_KEY }}" > "${SOLDEER_LOGIN_FILE}"

      - name: Download guest artifacts
        uses: actions/download-artifact@v4
        with:
          name: guest-artifacts
          path: ./guest-artifacts

      - name: Copy ImageID to contracts
        run: |
          rm contracts/src/ImageID.sol
          cp guest-artifacts/ImageID.sol contracts/src/ImageID.sol

      - name: Release contracts to Soldeer
        working-directory: contracts
        env:
            SOLDEER_LOGIN_FILE: "${{ runner.temp }}/.soldeer_login"
            VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
        run: |
          forge soldeer push "vlayer~${VLAYER_BUILD}" --skip-warnings

      - name: Build vlayer contracts artifact
        working-directory: contracts
        env:
            VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
        run: |
          forge soldeer push "vlayer~${VLAYER_BUILD}" --dry-run

      - name: Push contracts artifact
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: vlayer-contracts
          path: contracts/contracts.zip
          if-no-files-found: error
          retention-days: 3


  create-release:
    name: Create GH releases
    runs-on: aws-linux-small
    needs: [build-examples, build-extension, push-contracts]
    steps:
      - run: mkdir -p dist
      - uses: actions/download-artifact@v4
        with:
          path: ./dist
          merge-multiple: true
      - run: rm ./dist/{ImageID.sol,Elf.sol,methods.rs} || true

      - name: Release tagged nightly
        uses: ncipollo/release-action@v1
        with:
          tag: nightly-${{ github.sha }}
          artifacts: "./dist/*"

      - name: Release nightly-latest
        uses: ncipollo/release-action@v1
        with:
          tag: nightly-latest
          makeLatest: true
          allowUpdates: true
          artifacts: "./dist/*"

  push-artifacts-to-s3:
    name: Push artifacts to AWS S3
    runs-on: ubuntu-latest
    needs: [build-release, build-examples, build-extension, push-contracts] 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - run: mkdir -p dist/latest
      - uses: actions/download-artifact@v4
        with:
          path: ./dist/latest
          merge-multiple: true
      - run: rm ./dist/latest/{ImageID.sol,Elf.sol,methods.rs} || true
      - run: cp -r "./dist/latest" "./dist/${{ github.sha }}"

      - name: Push tagged binaries to AWS S3
        uses: mostlytyped/s3-put-action@v1.0.0
        with:
          args: --recursive
        env:
          AWS_ENDPOINT: ${{ vars.AWS_ENDPOINT }}
          AWS_BUCKET: ${{ vars.AWS_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          LOCAL_FILE: ./dist/${{ github.sha }}
          REMOTE_FILE: "" 

      - name: Push latest binaries to AWS S3
        uses: mostlytyped/s3-put-action@v1.0.0
        with:
          args: --recursive
        env:
          AWS_ENDPOINT: ${{ vars.AWS_ENDPOINT }}
          AWS_BUCKET: ${{ vars.AWS_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          LOCAL_FILE: ./dist/latest
          REMOTE_FILE: "" 

      - name: Push vlayerup scripts to AWS S3
        uses: mostlytyped/s3-put-action@v1.0.0
        with:
          args: --recursive
        env:
          AWS_ENDPOINT: ${{ vars.AWS_ENDPOINT }}
          AWS_BUCKET: ${{ vars.AWS_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          LOCAL_FILE: ./bash/vlayerup
          REMOTE_FILE: "" 
  
  publish-sdk-to-npm:
    name: Publish SDK to NPM
    needs: [build-release, build-examples, build-extension, push-contracts] 
    runs-on: ubuntu-latest
    steps:   
    - uses: actions/checkout@v2
    - name: Install TypeScript prerequisites
      uses: ./.github/actions/ts-prerequisites
    - uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
    - name: Update SDK version
      working-directory: packages/sdk
      env: 
        VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
      run: npm version "${VLAYER_BUILD}" --no-workspaces-update
    - name: Install dependencies
      working-directory: packages/sdk
      run: bun install --frozen-lockfile
    - name: replace symlinks
      working-directory: packages/sdk
      run: bun run replaceCommonsSymlink
    - name: Build
      working-directory: packages/sdk
      run: bun run build
    - name: Publish to NPM
      working-directory: packages/sdk
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        PACKAGE_NAME=$(npm pack)
        npm publish --access public ${PACKAGE_NAME}

  test-release:
    name: Test release
    needs: [push-artifacts-to-s3, publish-sdk-to-npm]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Test release
        run: bash/test-release.sh
     