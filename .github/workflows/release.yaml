name: Release
on:
  workflow_call:
    inputs:
      vlayer_release:
        description: "Release type (nightly or stable)"
        required: true
        type: string
jobs:
  build-release:
    if: github.repository == 'vlayer-xyz/vlayer'
    uses: ./.github/workflows/build_rust_release.yaml
    with:
      vlayer_release: ${{ inputs.vlayer_release }}

  build-examples:
    if: github.repository == 'vlayer-xyz/vlayer'
    name: Build examples
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Package examples
        run: ./bash/pack-examples.sh

      - name: Push artifact
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: examples
          path: out/examples.tar.gz
          if-no-files-found: error
          retention-days: 3

  build-extension:
    if: github.repository == 'vlayer-xyz/vlayer'
    name: Build browser extension
    needs: [build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build extension
        uses: ./.github/actions/build-extension
        with:
          version_name: ${{ needs.build-release.outputs.vlayer_build }}
        env:
          VITE_SENTRY_DSN: "https://24fb8a36179103a1aafd60401c006505@o4508754893012992.ingest.de.sentry.io/4509004636422224"

  push-contracts:
    if: github.repository == 'vlayer-xyz/vlayer'
    name: Push vlayer contracts
    needs: [build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install contracts prerequisites
        uses: ./.github/actions/contracts-prerequisites

      - name: Set up Soldeer login
        env:
          SOLDEER_LOGIN_FILE: "${{ runner.temp }}/.soldeer_login"
        run: |
          forge soldeer login --email "${{ secrets.SOLDEER_ADMIN_LOGIN }}" --password "${{ secrets.SOLDEER_ADMIN_PASSWORD }}"

      - name: Download guest artifacts
        uses: actions/download-artifact@v4
        with:
          name: guest-artifacts
          path: ./guest-artifacts

      - name: Copy ImageID to contracts
        run: |
          rm contracts/vlayer/src/ImageID.sol
          cp guest-artifacts/ImageID.sol contracts/vlayer/src/ImageID.sol

      - name: Release contracts to Soldeer
        working-directory: contracts/vlayer
        env:
          SOLDEER_LOGIN_FILE: "${{ runner.temp }}/.soldeer_login"
          VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
        run: |
          # Push to soldeer, only if the version is not yet published.
          cd $(mktemp -d)
          forge soldeer init --config-location foundry
          forge soldeer install "vlayer~${VLAYER_BUILD}" || (cd - && forge soldeer push "vlayer~${VLAYER_BUILD}" --skip-warnings)

      - name: Build vlayer contracts artifact
        working-directory: contracts/vlayer
        env:
          VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
        run: |
          forge soldeer push "vlayer~${VLAYER_BUILD}" --dry-run

      - name: Try publish newest ImageId onchain
        uses: ./.github/actions/publish-image-id-onchain
        with:
          dry_run: true
          private_key: ${{ secrets.REPOSITORY_CONTRACT_OWNER_PRIVATE_KEY }}

      - name: Publish newest ImageId onchain
        uses: ./.github/actions/publish-image-id-onchain
        with:
          dry_run: false
          private_key: ${{ secrets.REPOSITORY_CONTRACT_OWNER_PRIVATE_KEY }}

      - name: Push contracts artifact
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: vlayer-contracts
          path: contracts/vlayer/vlayer.zip
          if-no-files-found: error
          retention-days: 3

  push-artifacts-to-s3:
    if: github.repository == 'vlayer-xyz/vlayer'
    name: Push artifacts to AWS S3
    runs-on: ubuntu-latest
    needs: [build-release, build-examples, build-extension, push-contracts]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - run: mkdir -p dist/latest
      - uses: actions/download-artifact@v4
        with:
          path: ./dist/latest
          merge-multiple: true
      - run: rm ./dist/latest/{ImageID.sol,Elf.sol,methods.rs,risc0_call_guest} || true
      - run: cp ./docker/docker-compose.devnet.yaml ./dist/latest/

      - env:
          VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
        run: cp -r "./dist/latest" "./dist/${VLAYER_BUILD}"
      - name: Push tagged binaries to AWS S3
        uses: mostlytyped/s3-put-action@v1.0.0
        with:
          args: --recursive
        env:
          AWS_ENDPOINT: ${{ vars.AWS_ENDPOINT }}
          AWS_BUCKET: ${{ vars.AWS_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          LOCAL_FILE: ./dist/${{ needs.build-release.outputs.vlayer_build }}
          REMOTE_FILE: ""

      - run: cp -r "./dist/latest" "./dist/latest-${{ inputs.vlayer_release }}"
      - name: Push latest binaries to AWS S3
        uses: mostlytyped/s3-put-action@v1.0.0
        with:
          args: --recursive
        env:
          AWS_ENDPOINT: ${{ vars.AWS_ENDPOINT }}
          AWS_BUCKET: ${{ vars.AWS_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          LOCAL_FILE: ./dist/latest-${{ inputs.vlayer_release }}
          REMOTE_FILE: ""

      - name: Push vlayerup scripts to AWS S3
        uses: mostlytyped/s3-put-action@v1.0.0
        with:
          args: --recursive
        env:
          AWS_ENDPOINT: ${{ vars.AWS_ENDPOINT }}
          AWS_BUCKET: ${{ vars.AWS_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          LOCAL_FILE: ./bash/vlayerup
          REMOTE_FILE: ""

  publish-sdk-to-npm:
    if: github.repository == 'vlayer-xyz/vlayer'
    name: Publish SDK to NPM
    needs: [build-release, build-examples, build-extension, push-contracts]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install TypeScript prerequisites
        uses: ./.github/actions/ts-prerequisites
      - name: Update SDK version
        working-directory: packages/sdk
        env:
          VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
        run: ../../bash/bump-npm-version.sh --update-peer-deps=@vlayer/sdk
      - name: Install dependencies
        working-directory: packages/sdk
        run: bun install
      - name: replace symlinks
        working-directory: packages/sdk
        run: bun run replaceCommonsSymlink
      - name: Build
        working-directory: packages/sdk
        run: bun run build
      - name: Publish to NPM
        working-directory: packages/sdk
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
        run: |
          PACKAGE_TARBALL_NAME=$(npm pack)
          if npm show "@vlayer/sdk@${VLAYER_BUILD}" > /dev/null 2>&1; then
            echo "Version $VLAYER_BUILD already exists. Skipping publish."
          else
            npm publish --access public ${PACKAGE_TARBALL_NAME}
          fi

  publish-react-hooks-to-npm:
    if: github.repository == 'vlayer-xyz/vlayer'
    name: Publish React hooks to NPM
    needs: [build-release, publish-sdk-to-npm]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install TypeScript prerequisites
        uses: ./.github/actions/ts-prerequisites
      - name: Update React hooks version
        working-directory: packages/sdk-hooks
        env:
          VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
        run: ../../bash/bump-npm-version.sh --update-peer-deps=@vlayer/sdk
      - name: Install dependencies
        working-directory: packages/sdk-hooks
        run: bun install
      - name: Install released SDK version
        env:
          VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
        run: bun add @vlayer/sdk@"${VLAYER_BUILD}"
      - name: Build
        working-directory: packages/sdk-hooks
        run: bun run build
      - name: Publish to NPM
        working-directory: packages/sdk-hooks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
        run: |
          PACKAGE_TARBALL_NAME=$(npm pack)
          if npm show "@vlayer/react@${VLAYER_BUILD}" > /dev/null 2>&1; then
            echo "Version $VLAYER_BUILD already exists. Skipping publish."
          else
            npm publish --access public ${PACKAGE_TARBALL_NAME}
          fi

  push-docker-image:
    if: github.repository == 'vlayer-xyz/vlayer'
    name: Push docker image to github registry
    needs: [build-release, push-artifacts-to-s3]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        docker_image:
          [
            "vlayer",
            "call_server",
            "chain_server",
            "chain_worker",
            "vdns_server",
          ]
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: "vlayer-xyz/${{ matrix.docker_image }}"
      VLAYER_BUILD: ${{ needs.build-release.outputs.vlayer_build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up tags
        id: tags
        run: |
          tags="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.vlayer_release }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VLAYER_BUILD }}"
          if [ "${{ inputs.vlayer_release }}" = "stable" ]; then
            tags="${tags},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          fi
          echo "TAGS=$tags" >> $GITHUB_ENV
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: "docker/${{ matrix.docker_image }}/Dockerfile"
          push: true
          tags: ${{ env.TAGS }}
          build-args: |
            VLAYER_RELEASE=${{ inputs.vlayer_release }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  create-nightly-release:
    if: github.repository == 'vlayer-xyz/vlayer' && inputs.vlayer_release == 'nightly'
    name: Create GH releases
    runs-on: ubuntu-latest
    needs:
      [
        build-release,
        build-examples,
        build-extension,
        push-contracts,
        publish-react-hooks-to-npm,
        push-docker-image,
      ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Fetch all tags
        run: git fetch --tags --force
      - run: mkdir -p dist
      - uses: actions/download-artifact@v4
        with:
          path: ./dist
          merge-multiple: true
      - run: rm ./dist/{ImageID.sol,Elf.sol,methods.rs,risc0_call_guest} || true

      - name: Determine previous nightly tag
        id: tags
        run: |
          NEW_TAG="nightly-${{ github.sha }}"
          PREVIOUS_TAG=$(git tag --sort=-creatordate | grep '^nightly-' | grep -v "$NEW_TAG" | head -n 1)
          echo "NEW_TAG=$NEW_TAG" >> "$GITHUB_OUTPUT"
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> "$GITHUB_OUTPUT"

      - name: Generate release notes from previous nightly release
        id: notes
        run: |
          NOTES=$(gh api repos/${{ github.repository }}/releases/generate-notes \
            -f tag_name=${{ steps.tags.outputs.NEW_TAG }} \
            -f target_commitish=${{ github.sha }} \
            -f previous_tag_name=${{ steps.tags.outputs.PREVIOUS_TAG }} \
            --jq .body)
          { 
            echo "RELEASE_NOTES<<EOF"; 
            echo "$NOTES"; 
            echo "EOF"; 
          } >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release tagged nightly
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tags.outputs.NEW_TAG }}
          commit: ${{ github.sha }}
          makeLatest: false
          prerelease: true
          body: ${{ env.RELEASE_NOTES }}
          allowUpdates: true
          artifacts: "./dist/*"

      - name: Release nightly-latest
        uses: ncipollo/release-action@v1
        with:
          tag: nightly-latest
          makeLatest: false
          prerelease: true
          allowUpdates: true
          artifacts: "./dist/*"

  create-stable-release:
    if: github.repository == 'vlayer-xyz/vlayer' && inputs.vlayer_release == 'stable'
    name: Create GH releases
    runs-on: ubuntu-latest
    needs:
      [
        build-release,
        build-examples,
        build-extension,
        push-contracts,
        publish-react-hooks-to-npm,
        push-docker-image,
      ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Fetch all tags
        run: git fetch --tags --force
      - run: mkdir -p dist
      - uses: actions/download-artifact@v4
        with:
          path: ./dist
          merge-multiple: true
      - run: rm ./dist/{ImageID.sol,Elf.sol,methods.rs,risc0_call_guest} || true

      - name: Determine previous stable tag
        id: tags
        run: |
          NEW_TAG="v${{ needs.build-release.outputs.vlayer_build }}"
          PREVIOUS_TAG=$(git tag --sort=-creatordate | grep '^v[0-9]' | grep -v "$NEW_TAG" | head -n 1)
          echo "NEW_TAG=$NEW_TAG" >> "$GITHUB_OUTPUT"
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> "$GITHUB_OUTPUT"

      - name: Generate release notes from previous stable release
        id: notes
        run: |
          NOTES=$(gh api repos/${{ github.repository }}/releases/generate-notes \
            -f tag_name=${{ steps.tags.outputs.NEW_TAG }} \
            -f target_commitish=${{ github.sha }} \
            -f previous_tag_name=${{ steps.tags.outputs.PREVIOUS_TAG }} \
            --jq .body)
          { 
            echo "RELEASE_NOTES<<EOF"; 
            echo "$NOTES"; 
            echo "EOF"; 
          } >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release latest stable version
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tags.outputs.NEW_TAG }}
          commit: ${{ github.sha }}
          makeLatest: true
          body: ${{ env.RELEASE_NOTES }}
          allowUpdates: false
          artifacts: "./dist/*"
