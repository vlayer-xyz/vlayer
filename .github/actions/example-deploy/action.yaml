name: Example deploy prerequisites
description: Installs & builds example prerequisites.
inputs:
  example_name:
    description: 'Name of the example to deploy'
    required: true
  testnet_private_key_location:
    description: "Path to testnet private key"
    required: true
  vercel_token:
    description: 'Vercel token'
    required: true
  vercel_project_id:
    description: 'Vercel project ID'
    required: true
  vercel_org_id:
    description: 'Vercel organization ID'
    required: true
  github_token:
    description: 'Github token'
    required: true
  json_rpc_url:
    description: 'JSON RPC URL'
    required: true
  vlayer_api_token:
    description: 'Vlayer API token'
    required: true
  vite_sentry_dsn:
    description: 'Sentry DSN'
    required: false
outputs:
  deployment_url:
    description: "Vercel deployment url"
    value: ${{ steps.deploy-vercel-preview.outputs.deployment_url }}
runs:
  using: "composite"
  steps:
    - name: Install contracts prerequisites
      uses: ./.github/actions/contracts-prerequisites
    - name: Install TypeScript prerequisites
      uses: ./.github/actions/ts-prerequisites

    - name: Download nightly contracts
      shell: bash
      run: |
        curl https://vlayer-releases.s3.eu-north-1.amazonaws.com/latest/vlayer.zip -o vlayer.zip

    - name: Extract nightly contracts
      shell: bash
      run: |
        mkdir -p nightly-contracts
        unzip vlayer.zip -d ./nightly-contracts

    - name: Copy nightly ImageID to contracts
      shell: bash
      run: |
        rm contracts/vlayer/src/ImageID.sol
        cp ./nightly-contracts/src/ImageID.sol contracts/vlayer/src/ImageID.sol
        rm -rf ./nightly-contracts

    - name: Install contracts' dependencies
      shell: bash
      working-directory: ./contracts/vlayer
      run: forge soldeer install && forge build

    - name: Build vlayer sdk
      shell: bash
      run: bun install && bun run build
      working-directory: ./packages/sdk

    - name: Build vlayer react hooks
      shell: bash
      run: bun install && bun run build
      working-directory: ./packages/sdk-hooks

    - name: Build example contracts
      shell: bash
      run: forge soldeer install && forge clean && forge build
      working-directory: ./examples/${{ inputs.example_name }}

    - name: Install example dependencies
      shell: bash
      run: bun install
      working-directory: ./examples/${{ inputs.example_name }}/vlayer

    - name: Install Vercel
      shell: bash
      run: npm install -g vercel

    - name: Read testnet private key
      run: |
        EXAMPLES_TEST_PRIVATE_KEY=$(cat "${{ inputs.testnet_private_key_location }}")
        echo "::add-mask::$EXAMPLES_TEST_PRIVATE_KEY"
        echo "EXAMPLES_TEST_PRIVATE_KEY=${EXAMPLES_TEST_PRIVATE_KEY}" >> $GITHUB_ENV
      shell: bash

    - name: Deploy contracts
      shell: bash
      run: bun run deploy:testnet
      env:
        VLAYER_ENV: testnet
        USE_WINDOW_ETHEREUM_TRANSPORT: true
        JSON_RPC_URL: ${{ inputs.json_rpc_url }}
        VLAYER_API_TOKEN: ${{ inputs.vlayer_api_token }}
      working-directory: ./examples/${{ inputs.example_name }}/vlayer

    - name: Remove no longer needed private key from env
      run: |
        echo "EXAMPLES_TEST_PRIVATE_KEY=removed" >> $GITHUB_ENV
      shell: bash

    - name: Build vite
      shell: bash
      run: bun run vite build
      env:
        VITE_FAUCET_URL: https://faucet.vlayer.xyz
        VITE_SENTRY_DSN: ${{ inputs.vite_sentry_dsn }}
      working-directory: ./examples/${{ inputs.example_name }}/vlayer

    - name: Copy vercel.json (if exists)
      shell: bash
      run: |
        if [ -f "./vercel.json" ]; then
          cp ./vercel.json ./dist/vercel.json
        fi
      working-directory: ./examples/${{ inputs.example_name }}/vlayer

    - name: Deploy to Vercel
      if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'
      shell: bash
      env:
        VERCEL_ENV: production
        VERCEL_TOKEN: ${{ inputs.vercel_token }}
        VERCEL_PROJECT_ID: ${{ inputs.vercel_project_id }}
        VERCEL_ORG_ID: ${{ inputs.vercel_org_id }}
        GITHUB_TOKEN: "${{ inputs.github_token }}"
        EXAMPLE_NAME: ${{ inputs.example_name }}
      run: bash/vercel/deploy-example.sh
    - name: Deploy to Vercel (PR Preview)
      id: deploy-vercel-preview
      if: github.event_name == 'pull_request'
      shell: bash
      env:
        VERCEL_ENV: preview
        VERCEL_TOKEN: ${{ inputs.vercel_token }}
        VERCEL_PROJECT_ID: ${{ inputs.vercel_project_id }}
        VERCEL_ORG_ID: ${{ inputs.vercel_org_id }}
        GITHUB_TOKEN: "${{ inputs.github_token }}"
        PR_NUMBER: "${{ github.event.number }}"
        EXAMPLE_NAME: ${{ inputs.example_name }}
      run: bash/vercel/deploy-example.sh
      
