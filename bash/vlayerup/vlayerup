#!/usr/bin/env bash
set -ueo pipefail

# What this script will do: 
# - download latest binary from vlayer 
# - sanity checks like curl/git/foundry/anvil installed 
# - chmod +x the binary

BASE_DIR=${XDG_CONFIG_HOME:-$HOME}
VLAYER_DIR=${VLAYER_DIR:-"$BASE_DIR/.vlayer"}
VLAYER_BIN_DIR="$VLAYER_DIR/bin"
CHANNEL="stable" # Default channel.
VERSION="" # Specific version to install.
CHANNEL_SET="" # Flag to track if channel was explicitly set.

main() {
  parse_args "$@"

  need_cmd git
  need_cmd curl
  need_cmd forge
  need_cmd anvil

  # Compute the URL of the release tarball in the vlayer repository (will work with public repo)
  # TODO: Add support for different platforms/architectures
    PLATFORM=$(tolower "$(uname -s)")
    EXT="tar.gz"
    case $PLATFORM in
      linux) 
        PLATFORM="linux"
        ;;
      darwin|mac*)
        PLATFORM="darwin"
        ;;
      *)
        err "unsupported platform: $PLATFORM"
        ;;
    esac

    ARCHITECTURE=$(uname -m)
    if [ "${ARCHITECTURE}" = "x86_64" ]; then
      # Redirect stderr to /dev/null to avoid printing errors if non Rosetta.
      if [ "$(sysctl -n sysctl.proc_translated 2>/dev/null)" = "1" ]; then
        ARCHITECTURE="arm64" # Rosetta.
      else
        ARCHITECTURE="amd64" # Intel.
      fi
    elif [ "${ARCHITECTURE}" = "arm64" ] ||[ "${ARCHITECTURE}" = "aarch64" ] ; then
      ARCHITECTURE="arm64" # Arm.
    else
      ARCHITECTURE="amd64" # Amd.
    fi

  if [ -n "$VERSION" ]; then
    RELEASE_URL="https://vlayer-releases.s3.eu-north-1.amazonaws.com/${VERSION}/binaries-${PLATFORM}-${ARCHITECTURE}.${EXT}"
  elif [ "$CHANNEL" = "nightly" ]; then
    RELEASE_URL="https://vlayer-releases.s3.eu-north-1.amazonaws.com/latest-nightly/binaries-${PLATFORM}-${ARCHITECTURE}.${EXT}"
  elif [ "$CHANNEL" = "stable" ]; then
    RELEASE_URL="https://vlayer-releases.s3.eu-north-1.amazonaws.com/latest-stable/binaries-${PLATFORM}-${ARCHITECTURE}.${EXT}"
  else
    err "unsupported channel: $CHANNEL. Supported channels are: nightly, stable"
  fi

  if [ -n "$VERSION" ]; then
    say "Downloading vlayer version $VERSION..."
  else
    say "Downloading vlayer from $CHANNEL channel..."
  fi
  ensure download "$RELEASE_URL" | ensure tar -xzC "$VLAYER_DIR"
  # TODO: replace with the right binary name
  BIN_PATH="$VLAYER_BIN_DIR/vlayer" 
  say "Unpacking"
  chmod +x "$BIN_PATH" 
  show_version "$BIN_PATH"
  say "done!"
}

parse_args() {
  while [ $# -gt 0 ]; do
    case "$1" in
      --channel)
        if [ -n "$VERSION" ]; then
          err "cannot use --channel when --version is specified"
        fi
        if [ -n "${2:-}" ]; then
          CHANNEL="$2"
          CHANNEL_SET="true"
          shift
        else
          err "missing argument for --channel"
        fi
        ;;
      --version)
        if [ -n "$CHANNEL_SET" ]; then
          err "cannot use --version when --channel is specified"
        fi
        if [ -n "${2:-}" ]; then
          VERSION="$2"
          shift
        else
          err "missing argument for --version"
        fi
        ;;
      *)
        err "unknown argument: $1. Usage: vlayerup [--channel stable|nightly] OR [--version X.Y.Z]"
        ;;
    esac
    shift
  done
}

need_cmd() {
  if ! check_cmd "$1"; then
    err "need '$1' (command not found)"
  fi
}

tolower() {
  echo "$1" | awk '{print tolower($0)}'
}

check_cmd() {
  command -v "$1" &>/dev/null
}

# Run a command that should never fail. If the command fails execution
# will immediately terminate with an error showing the failing command.
ensure() {
  if ! "$@"; then err "command failed: $*"; fi
}

show_version() {
  local bin_path="$1"
  local version_output
  
  if version_output=$("$bin_path" --version 2>/dev/null); then
    say "Installed version: $version_output"
  else
    err "installation failed: vlayer binary version can't be determined"
  fi
}

download() {
  local url="$1"
  
  if check_cmd curl; then
    if ! curl -#fL "$url"; then
      handle_download_error "$url"
    fi
  else
    if ! wget --show-progress -qO- "$url"; then
      handle_download_error "$url"
    fi
  fi
}

handle_download_error() {
  local url="$1"
  if [ -n "$VERSION" ]; then
    err "version $VERSION not found. Check available versions at: https://github.com/vlayer-xyz/vlayer/releases"
  else
    err "failed to download from $CHANNEL channel. URL: $url"
  fi
}

say() {
  printf "vlayerup: %s\n" "$1"
}

err() {
  say "$1" >&2
  exit 1
}

main "$@"
