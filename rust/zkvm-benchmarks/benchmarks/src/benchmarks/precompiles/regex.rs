use alloy_primitives::Bytes;
use alloy_sol_types::SolValue;
use call_precompiles::regex::{capture, is_match};

use crate::Benchmark;

/// embed the files generated by build.rs
macro_rules! include_generated_text {
    ($name:ident, $file:literal) => {
        pub const $name: &str = include_str!(concat!(env!("OUT_DIR"), "/", $file));
    };
}

include_generated_text!(TEXT_1KB, "1kb.txt");
include_generated_text!(TEXT_10KB, "10kb.txt");
include_generated_text!(TEXT_100KB, "100kb.txt");

// Regex patterns for benchmarking different complexity levels
const SIMPLE_PATTERN: &str = "^.*needle.*$"; // Simple word matching
const COMPLEX_PATTERN: &str = "^.*\\d{3}-\\d{2}-\\d{4}.*$"; // Complex number pattern with character classes

fn benchmark_is_match(text: &str, pattern: &str) {
    let calldata: Bytes = [text, pattern].abi_encode().into();
    is_match(&calldata).expect("is_match failed");
}

fn benchmark_capture(text: &str, pattern: &str) {
    let calldata: Bytes = [text, pattern].abi_encode().into();
    capture(&calldata).expect("capture failed");
}

fn make_benchmarks(
    name_prefix: &str,
    pattern: &'static str,
    bench_fn: fn(&str, &str),
    cycles: [u64; 3],
) -> Vec<Benchmark> {
    vec![
        Benchmark::new(
            format!("{name_prefix}_1kb"),
            move || bench_fn(TEXT_1KB, pattern),
            cycles[0],
        ),
        Benchmark::new(
            format!("{name_prefix}_10kb"),
            move || bench_fn(TEXT_10KB, pattern),
            cycles[1],
        ),
        Benchmark::new(
            format!("{name_prefix}_100kb"),
            move || bench_fn(TEXT_100KB, pattern),
            cycles[2],
        ),
    ]
}

pub fn benchmarks() -> Vec<Benchmark> {
    let mut benches = Vec::new();
    benches.extend(make_benchmarks(
        "regex_is_match_simple",
        SIMPLE_PATTERN,
        benchmark_is_match,
        [480_000, 735_000, 3_280_000],
    ));
    benches.extend(make_benchmarks(
        "regex_is_match_complex",
        COMPLEX_PATTERN,
        benchmark_is_match,
        [2_631_000, 2_885_000, 5_431_000],
    ));
    benches.extend(make_benchmarks(
        "regex_capture_simple",
        SIMPLE_PATTERN,
        benchmark_capture,
        [628_000, 1_913_000, 59_476_000],
    ));
    benches.extend(make_benchmarks(
        "regex_capture_complex",
        COMPLEX_PATTERN,
        benchmark_capture,
        [8_900_000, 8_900_000, 65_129_000],
    ));
    benches
}
