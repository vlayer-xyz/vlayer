use alloy_primitives::Bytes;
use alloy_sol_types::SolValue;
use call_precompiles::json::{get_int, get_string};

const KEY: &str = "key1";

use crate::Benchmark;

/// embed the files generated by build.rs
macro_rules! include_generated_json {
    ($name:ident, $file:literal) => {
        pub const $name: &str = include_str!(concat!(env!("OUT_DIR"), "/", $file));
    };
}

include_generated_json!(JSON_100B, "100b.json");
include_generated_json!(JSON_1KB, "1kb.json");
include_generated_json!(JSON_10KB, "10kb.json");
include_generated_json!(JSON_100KB, "100kb.json");
include_generated_json!(JSON_10K_LVL_1, "10kb_1_level.json");
include_generated_json!(JSON_10K_LVL_10, "10kb_10_level.json");
include_generated_json!(JSON_10K_LVL_100, "10kb_100_level.json");
include_generated_json!(JSON_10K_INT_VALUES, "10kb_with_numbers.json");

lazy_static::lazy_static! {
    static ref LVL_1_KEY:  String = create_nested_key_path(1, KEY);
    static ref LVL_10_KEY: String = create_nested_key_path(10, KEY);
    static ref LVL_100_KEY:String = create_nested_key_path(100, KEY);
}

fn create_nested_key_path(depth: usize, key_name: &str) -> String {
    let mut path = String::new();
    for i in 1..=depth {
        path.push_str(&format!("level{i}"));
        path.push('.');
    }
    path.push_str(key_name);
    path
}

fn benchmark_get_string(json_body: &str, path: &str) {
    let calldata: Bytes = [json_body, path].abi_encode().into();
    get_string(&calldata).expect("get_string failed");
}

fn benchmark_get_int(json_body: &str, path: &str) {
    let calldata: Bytes = [json_body, path].abi_encode().into();
    get_int(&calldata).expect("get_int failed");
}

pub fn benchmarks() -> Vec<Benchmark> {
    vec![
        Benchmark::new("json_get_string_100b", || benchmark_get_string(JSON_100B, KEY), 38_000),
        Benchmark::new("json_get_string_1kb", || benchmark_get_string(JSON_1KB, KEY), 210_000),
        Benchmark::new("json_get_string_10kb", || benchmark_get_string(JSON_10KB, KEY), 2_620_000),
        Benchmark::new(
            "json_get_string_100kb",
            || benchmark_get_string(JSON_100KB, KEY),
            31_434_000,
        ),
        Benchmark::new(
            "json_get_string_10k_1_lvl",
            || benchmark_get_string(JSON_10K_LVL_1, &LVL_1_KEY),
            2_614_000,
        ),
        Benchmark::new(
            "json_get_string_10k_10_lvl",
            || benchmark_get_string(JSON_10K_LVL_10, &LVL_10_KEY),
            2_633_000,
        ),
        Benchmark::new(
            "json_get_string_10k_100_lvl",
            || benchmark_get_string(JSON_10K_LVL_100, &LVL_100_KEY),
            2_659_000,
        ),
        Benchmark::new(
            "json_get_int_10kb",
            || benchmark_get_int(JSON_10K_INT_VALUES, KEY),
            3_896_399,
        ),
    ]
}
